<?php
/**
 * Generates new coupons based on existing coupons
 *
 * @class 		AW_Coupon
 * @package		AutomateWoo
 */

class AW_Coupon {

	/** @var string : Coupon code to be cloned */
	public $template_coupon_code;

	/** @var string */
	public $code;

	/** @var string */
	public $prefix = '';

	/** @var string */
	public $suffix = '';

	/*** @var string : Number of days till coupon expires */
	public $expires;

	/** @var string */
	public $email_restriction;

	/** @var string */
	public $description;



	function __construct() {
		$this->prefix = apply_filters( 'automatewoo_generate_coupon_default_prefix', 'aw-' );
		$this->description = __( 'Generated by AutomateWoo', 'automatewoo' );
	}


	/**
	 * @param $code string
	 */
	function set_template_coupon_code( $code ) {
		$this->template_coupon_code = $code;
	}


	/**
	 * @param $prefix string
	 */
	function set_prefix( $prefix ) {
		$this->prefix = $prefix;
	}


	/**
	 * @param $email
	 */
	function set_email_restriction( $email ) {
		$this->email_restriction = is_email( $email );
	}


	/**
	 * @param $days
	 */
	function set_expires( $days ) {
		$this->expires = absint( $days );
	}


	/**
	 * @param $suffix
	 */
	function set_suffix( $suffix ) {
		$this->suffix = $suffix;
	}


	/**
	 * @param $description
	 */
	function set_description( $description ) {
		$this->description = $description;
	}


	/**
	 * Generates a unique coupon code
	 */
	function generate_code() {

		$this->code = apply_filters(
			'automatewoo_generate_coupon_name',
			uniqid( $this->prefix ) . $this->suffix,
			$this->prefix
		);
	}


	/**
	 * Returns true on success
	 *
	 * @return int|bool
	 */
	function generate_coupon() {

		global $wpdb;

		// get template coupon
		$template_coupon_id = absint( $wpdb->get_var(
			$wpdb->prepare(
				apply_filters(
					'woocommerce_coupon_code_query',
					"SELECT ID FROM $wpdb->posts WHERE post_title = %s AND post_type = 'shop_coupon'"
				),
				$this->template_coupon_code )
			)
		);

		// coupon doesn't exist
		if ( ! $template_coupon_id )
			return false;


		$coupon = [
			'post_title' => $this->code,
			'post_content' => '',
			'post_status' => 'publish',
			'post_author' => 1,
			'post_type' => 'shop_coupon',
			'post_excerpt' => $this->description
		];

		$new_coupon_id = wp_insert_post( $coupon );

		// Limit to the user
		if ( $this->email_restriction ) {
			update_post_meta( $new_coupon_id, 'customer_email', $this->email_restriction );
		}


		// copy across all meta keys except (customer_email and expiry_date)
		$excluded_fields = apply_filters( 'automatewoo_generated_coupon_excluded_meta_keys', [
			'customer_email',
			'_used_by',
			'_edit_lock',
			'_edit_last'
		] );

		$meta_fields = get_post_meta( $template_coupon_id, '', true );

		// copy fields
		foreach ( $meta_fields as $key => $value ) {

			if ( in_array( $key, $excluded_fields ) )
				continue;

			if ( is_array( $value ) )
				$value = $value[0];

			$value = maybe_unserialize($value);

			if ( ! empty( $value ) )
				update_post_meta( $new_coupon_id, $key, $value );
		}


		// if an expiry param isset use it
		if ( $this->expires ) {
			$date = new DateTime();
			$date->setTimestamp( current_time( 'timestamp' ) );
			$date->modify( '+' . $this->expires . ' days' );
			update_post_meta( $new_coupon_id, 'expiry_date', $date->format('Y-m-d') );
		}

		return $new_coupon_id;
	}

}
